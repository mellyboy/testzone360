pipeline {
    agent any

    options {
        timestamps()
    }

    stages {
        stage('‚úÖ Checkout') {
            steps {
                echo 'Checking out code...'
                git url: "${REPO_URL}", credentialsId: 'github-pat'
            }
        }
        stage('üì¶ Backend Build') {
            steps {
                dir('pg') {
                    echo 'Installing backend dependencies...'
                    sh 'npm install'
                }
            }
        }
        stage('üö¢ Pull Cypress Tests') {
            steps {
                script {
                    docker.withRegistry('', 'dockerhub-creds') {
                        docker.image('mellyboy/testzone360-cy').pull()
                    }
                }
            }
        }
        stage('üß™ Tests') {
            steps {
                script {
                    ansiColor('xterm') {
                        sh """
                            docker run --rm \\
                            -e BASE_URL=${BASE_URL} \\
                            -e API_URL=${API_URL} \\
                            -e TEST_EMAIL=${TEST_EMAIL} \\
                            -e TEST_PASSWORD=${TEST_PASSWORD} \\
                            mellyboy/testzone360-cy npm run cy:run:be:smoke
                        """
                    }
                }
            }
        }
        stage('üöÄ Deploy') {
            steps {
                sshagent(credentials: ['testzone360vm']) {
                    echo 'Deploying backend...'
                    sh '''
                        rsync -azh -e "ssh -o StrictHostKeyChecking=no" pg/ ${USER_HOST}:${BE_DEPLOYMENT_PATH}
                    '''
                    echo 'Starting service...'
                    sh '''
                        ssh -o StrictHostKeyChecking=no ${USER_HOST} "
                            pm2 delete ${APP_NAME}-api || true
                            cd ${BE_DEPLOYMENT_PATH} && pm2 start npm --name ${APP_NAME}-api -- start
                        "
                    '''
                }
            }
        }
    }

    post {
        success {
            script {
                def message = "@here :üåü Backend services successfully deployed!"
                slackSend(color: '#36a64f', message: message)
            }
        }
        failure {
            script {
                def message = "@here :üëÅÔ∏è Docker image build or push failed."
                slackSend(color: '#ff0000', message: message)
            }
        }
    }
}
